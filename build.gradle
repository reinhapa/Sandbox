plugins {
  id 'java-library'
  id 'war'
  id 'eclipse-wtp'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'com.google.osdetector' version '1.7.0'
  id 'net.minecrell.licenser' version '0.4.1'
  id 'net.nemerosa.versioning' version '2.14.0'
  id 'org.openapi.generator' version '5.0.1'
  id 'org.owasp.dependencycheck' version '6.1.1'
}

group = 'net.reini'
version = '0.0.1-SNAPSHOT'
description = "Sandbox project for pure testing purposes"
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

java {
    sourceCompatibility = JavaVersion.VERSION_14
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    api "org.slf4j:slf4j-api:1.7.30"

    implementation 'com.airhacks:afterburner.fx:1.7.0'
    implementation 'com.github.sarxos:webcam-capture:0.3.12'
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'com.google.zxing:javase:3.4.1'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation 'org.ehcache:ehcache:3.9.2'
    implementation 'org.glassfish.jersey.core:jersey-client:2.32'
    implementation 'org.jfree:jfreechart:1.5.3'

    implementation 'jakarta.activation:jakarta.activation-api:1.2.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'

    implementation 'org.apache.activemq:artemis-core-client:2.17.0'
    implementation 'org.apache.activemq:artemis-jms-client:2.17.0'
    implementation 'org.apache.activemq.rest:artemis-rest:2.17.0'

    implementation 'org.jboss.weld.se:weld-se-core:3.1.5.Final'
    implementation 'org.jboss:jandex:2.2.3.Final'

    // javaFX
    implementation "org.openjfx:javafx-base:15.0.1:$platform"
    implementation "org.openjfx:javafx-controls:15.0.1:$platform"
    implementation "org.openjfx:javafx-fxml:15.0.1:$platform"
    implementation "org.openjfx:javafx-graphics:15.0.1:$platform"

    // ssh
    implementation "com.jcraft:jsch:0.1.55"
    implementation 'org.apache.sshd:sshd-cli:2.6.0'

    compileOnly 'jakarta.platform:jakarta.jakartaee-api:8.0.0'

    // websocket
    compileOnly 'jakarta.websocket:jakarta.websocket-client-api:1.1.2'

    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    runtimeOnly 'net.reini:slf4j-cdi:1.1'
    runtimeOnly 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.0.0'
    runtimeOnly "org.slf4j:jcl-over-slf4j:1.7.30"
    runtimeOnly "org.slf4j:jul-to-slf4j:1.7.30"

    testImplementation 'com.esotericsoftware:kryo:5.0.3'
    testImplementation 'com.tngtech.archunit:archunit-junit5-api:0.17.0'
    testImplementation 'easymock:easymock:2.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jmockit:jmockit:1.49'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.7.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.8.0'

    testImplementation "org.slf4j:jul-to-slf4j:1.7.30"
    testImplementation 'jakarta.websocket:jakarta.websocket-client-api:1.1.2'

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    testRuntimeOnly 'com.tngtech.archunit:archunit-junit5:0.17.0'
    testRuntimeOnly 'jakarta.platform:jakarta.jakartaee-api:8.0.0'
    testRuntimeOnly 'net.reini:slf4j-cdi:1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.7.1', { exclude group: "junit", module: "junit" }
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.1'
    testRuntimeOnly "org.slf4j:jcl-over-slf4j:1.7.30"
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '-Xlint:all',
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    testLogging {
        events 'failed', 'skipped', 'passed'
    }
}

test {
    doFirst {
        copy {
            from 'src/main/resources/META-INF/beans.xml'
            into 'build/classes/java/main/META-INF'
        }
    }
}

task smokeTest(type: Test) {
    group 'verification'
    description 'Runs the smoke tests'
    useJUnitPlatform {
        includeTags 'smoke'
    }
}

task specialTest(type: Test) {
    group 'verification'
    description 'Runs the special tests'
    useJUnitPlatform {
        includeTags 'special'
    }
}

openApiGenerate {
  inputSpec = "$rootDir/swagger.yaml"
  generatorName = "jaxrs-spec"
  outputDir = "$buildDir/generated"
  apiPackage = "org.openapi.example.api"
  invokerPackage = "org.openapi.example.invoker"
  modelPackage = "org.openapi.example.model"
}

openApiValidate {
  inputSpec = "$rootDir/swagger.yaml".toString() 
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Sandbox for various test',
                   'Implementation-Version': project.version,
                   'Build-Revision': versioning.info.commit,
                   'Automatic-Module-Name': "net.reini.sandbox"
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}
dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
