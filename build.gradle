plugins {
  id 'java-library'
  id 'war'
  id 'eclipse-wtp'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'com.google.osdetector' version '1.7.3'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'net.nemerosa.versioning' version '3.1.0'
  id 'org.openapi.generator' version '7.7.0'
  id 'org.owasp.dependencycheck' version '10.0.3'
}

group = 'net.reini'
version = '0.0.1-SNAPSHOT'
description = "Sandbox project for pure testing purposes"
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

java {
    sourceCompatibility = JavaVersion.VERSION_21
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    api 'org.slf4j:slf4j-api:2.0.13'

    implementation 'com.airhacks:afterburner.fx:1.7.0'
    implementation 'com.github.sarxos:webcam-capture:0.3.12'
    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.google.zxing:javase:3.5.3'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'org.apache.commons:commons-pool2:2.12.0'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.10.0.202406032230-r'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation 'org.ehcache:ehcache:3.10.8:jakarta'
    implementation 'org.glassfish.jersey.core:jersey-client:3.1.7'
    implementation 'org.jfree:jfreechart:1.5.5'

    implementation 'jakarta.activation:jakarta.activation-api:2.1.3'
    implementation 'jakarta.jms:jakarta.jms-api:3.1.0'
    implementation 'jakarta.json.bind:jakarta.json.bind-api:3.0.1'
    implementation "jakarta.json:jakarta.json-api:2.1.3"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'org.eclipse.microprofile.config:microprofile-config-api:3.1'
    implementation 'org.eclipse.microprofile.metrics:microprofile-metrics-api:5.1.1'

    runtimeOnly 'io.smallrye.config:smallrye-config:3.9.0'
    runtimeOnly 'io.smallrye:smallrye-metrics:5.1.0'
    runtimeOnly 'org.eclipse:yasson:3.0.3'

    implementation 'org.apache.activemq:artemis-jakarta-client:2.35.0'
    implementation 'org.apache.activemq.rest:artemis-rest:2.25.0'

    implementation 'org.jboss.weld.se:weld-se-core:5.1.2.Final'
    implementation 'org.jboss:jandex:3.1.8'

    // javaFX
    implementation "org.openjfx:javafx-base:22.0.1:$platform"
    implementation "org.openjfx:javafx-controls:22.0.1:$platform"
    implementation "org.openjfx:javafx-fxml:22.0.1:$platform"
    implementation "org.openjfx:javafx-graphics:22.0.1:$platform"

    // ssh
    implementation 'org.apache.sshd:sshd-cli:2.13.2'

    compileOnly 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    compileOnly 'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0'
    compileOnly 'jakarta.websocket:jakarta.websocket-client-api:2.2.0'

    runtimeOnly 'ch.qos.logback:logback-classic:1.5.6'
    runtimeOnly 'com.h2database:h2:2.3.230'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    runtimeOnly 'org.glassfish.jersey.core:jersey-client:3.1.7'
    runtimeOnly 'org.glassfish.jersey.media:jersey-media-json-binding:3.1.7'
    runtimeOnly 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.1.5'
    runtimeOnly 'org.glassfish.jersey.inject:jersey-hk2:3.1.7'
    runtimeOnly 'org.slf4j:jcl-over-slf4j:2.0.13'
    runtimeOnly "org.slf4j:jul-to-slf4j:2.0.13"

    testImplementation 'com.esotericsoftware:kryo:5.6.0'
    testImplementation 'com.tngtech.archunit:archunit-junit5-api:1.3.0'
    testImplementation 'easymock:easymock:2.0'
    testImplementation 'net.jqwik:jqwik:1.9.0'
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'org.jmockit:jmockit:1.49'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.10.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.shredzone.acme4j:acme4j-client:3.3.1'

    testImplementation 'jakarta.websocket:jakarta.websocket-client-api:2.2.0'
    testImplementation 'org.codehaus.izpack:izpack-installer:5.2.3-SNAPSHOT'

    testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.6'
    testRuntimeOnly 'com.tngtech.archunit:archunit-junit5:1.3.0'
    testRuntimeOnly 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
    testRuntimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    testRuntimeOnly 'org.glassfish.jersey.core:jersey-client:3.1.7'
    testRuntimeOnly 'org.glassfish.jersey.media:jersey-media-json-binding:3.1.7'
    testRuntimeOnly 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.1.5'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-jfr:1.10.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.10.3', { exclude group: "junit", module: "junit" }
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.10.3'
    testRuntimeOnly "org.slf4j:jcl-over-slf4j:2.0.13"
    testRuntimeOnly 'org.eclipse:yasson:3.0.3'
}

spotless {
  java {
    ratchetFrom('origin/master')
    licenseHeaderFile('gradle/LICENSE_HEADER').yearSeparator(', ').skipLinesMatching('.+File Name: .+')
    googleJavaFormat()
    importOrder('java', 'javax', 'jakarta', 'org', 'com')
    removeUnusedImports()
  }
}
compileJava {
    doFirst {
        options.compilerArgs = [
                '-Xlint:all',
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml',
                '--add-exports', 'jdk.httpserver/com.sun.net.httpserver=UNNAMED'
        ]
    }
}

tasks.withType(JavaCompile).each {
    it.options.compilerArgs.add('--enable-preview')
}

tasks.withType(Test).each {
    it.useJUnitPlatform()
    it.systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    it.jvmArgs += "-XX:StartFlightRecording:filename=$buildDir/reports/${name}.jfr"
    it.testLogging {
        events 'failed', 'skipped', 'passed'
    }
}

tasks.register('testSmoke', Test) {
    group 'verification'
    description 'Runs the smoke tests'
    useJUnitPlatform {
        includeTags 'smoke'
    }
}

tasks.register('testSpecial', Test) {
    group 'verification'
    description 'Runs the special tests'
    useJUnitPlatform {
        includeTags 'special'
    }
}

openApiGenerate {
  inputSpec = "$rootDir/swagger.yaml"
  generatorName = "jaxrs-spec"
  outputDir = "$buildDir/generated"
  apiPackage = "org.openapi.example.api"
  invokerPackage = "org.openapi.example.invoker"
  modelPackage = "org.openapi.example.model"
  configOptions = [
          'useJakartaEe' : 'true',
          'useSwaggerAnnotations' : 'false',
          'useMicroProfileOpenAPIAnnotations' : 'true'
  ]
}

openApiValidate {
  inputSpec = "$rootDir/swagger.yaml".toString()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Sandbox for various test',
                   'Implementation-Version': project.version,
                   'Build-Revision': versioning.info.commit,
                   'Automatic-Module-Name': "net.reini.sandbox"
        metaInf {
            from file('.')
            include 'LICENSE'
        }
    }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'pr', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
