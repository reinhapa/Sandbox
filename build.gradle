plugins {
  id 'java-library'
  id 'war'
  id 'eclipse-wtp'
  id 'com.google.osdetector' version '1.6.2'
  id 'com.github.ben-manes.versions' version '0.21.0'
//  id 'net.minecrell.licenser' version '0.4.1'
  id 'net.nemerosa.versioning' version '2.12.1'
  id 'org.owasp.dependencycheck' version '5.0.0-M2'
}

group = 'net.reini'
version = '0.0.1-SNAPSHOT'
description = "Sandbox project for pure testing purposes"
ext.platform = osdetector.os == 'osx' ? 'mac' : osdetector.os == 'windows' ? 'win' : osdetector.os

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    implementation 'com.airhacks:afterburner.fx:1.+'
    implementation 'com.github.sarxos:webcam-capture:0.+'
    implementation 'com.google.zxing:core:3.+'
    implementation 'com.google.zxing:javase:3.+'
    implementation 'javax.cache:cache-api:1.+'
    implementation 'org.ehcache:ehcache:3.+'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.+'
    implementation 'org.glassfish.jersey.core:jersey-client:2+'
    implementation 'org.bouncycastle:bcprov-jdk14:1.+'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.1'

    implementation 'com.sun.activation:javax.activation:1.2.0'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.4.0-b180830.0438'

    implementation 'org.jboss.weld.se:weld-se-core:3.1.0.Final'
    implementation 'org.jboss:jandex:2.1.1.Final'

    // javaFX
    implementation "org.openjfx:javafx-base:11.+:$platform"
    implementation "org.openjfx:javafx-graphics:11.+:$platform"
    implementation "org.openjfx:javafx-fxml:11.+:$platform"
    implementation "org.openjfx:javafx-controls:11.+:$platform"
    
    compileOnly 'javax:javaee-api:8.+'

    // websocket
    compileOnly 'javax.websocket:javax.websocket-client-api:1.1'

    runtimeOnly 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.15'
    runtimeOnly 'net.reini:slf4j-cdi:1.0'

    testImplementation 'easymock:easymock:2.+'
    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.+'
    testImplementation 'org.jmockit:jmockit:1.+'
    testImplementation 'junit:junit:4.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.+'

    testImplementation 'javax.websocket:javax.websocket-client-api:1.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.+'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.+'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.+'

    testRuntimeOnly 'javax:javaee-api:8.+'
    testRuntimeOnly 'net.reini:slf4j-cdi:1.0'
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '-Xlint:all',
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls,javafx.fxml'
        ]
    }
}

test {
    doFirst {
        copy {
            from 'src/main/resources/META-INF/beans.xml'
            into 'build/classes/java/main/META-INF'
        }
    }
    useJUnitPlatform()
    testLogging {
        events 'skipped'
    }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr', 'preview'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}
